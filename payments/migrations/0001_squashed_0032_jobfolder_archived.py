# Generated by Django 4.1.10 on 2023-08-10 20:39

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import markdownfield.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    replaces = [
        ("payments", "0001_initial"),
        ("payments", "0002_jobfolder_worker_job"),
        ("payments", "0003_alter_worker_notes_alter_worker_paypal_username_and_more"),
        ("payments", "0004_remove_worker_payment_preference_and_more"),
        ("payments", "0005_jobfolder_visible"),
        ("payments", "0006_jobfolder_slug"),
        ("payments", "0007_jobfolder_description_alter_job_due_date"),
        ("payments", "0008_alter_job_spades_bounty_alter_job_usd_bounty"),
        ("payments", "0009_alter_job_description"),
        ("payments", "0010_alter_job_payment_preference"),
        ("payments", "0011_job_created_at_job_updated_at"),
        ("payments", "0012_job_description_rendered_and_more"),
        ("payments", "0013_remove_job_status_job_progress"),
        ("payments", "0014_alter_job_progress_alter_worker_google_username"),
        ("payments", "0015_remove_jobfolder_semester_job_semester"),
        ("payments", "0016_alter_job_progress_alter_worker_google_username_and_more"),
        ("payments", "0017_alter_job_usd_bounty"),
        ("payments", "0018_worker_updated_at"),
        ("payments", "0019_worker_twitch_username"),
        ("payments", "0020_remove_worker_google_username_worker_gmail_address"),
        ("payments", "0021_jobfolder_max_pending_jobfolder_max_total"),
        ("payments", "0022_alter_job_progress"),
        ("payments", "0023_alter_job_payment_preference"),
        ("payments", "0024_alter_job_payment_preference_alter_job_progress"),
        ("payments", "0025_alter_job_spades_bounty_alter_job_usd_bounty"),
        ("payments", "0026_remove_job_due_date"),
        ("payments", "0027_job_hours_estimate"),
        ("payments", "0028_alter_job_progress"),
        ("payments", "0029_job_admin_notes"),
        ("payments", "0030_alter_job_name"),
        ("payments", "0031_alter_worker_zelle_info"),
        ("payments", "0032_jobfolder_archived"),
    ]

    initial = True

    dependencies = [
        ("roster", "0084_alter_invoice_memo"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0040_alter_calendar_urls_again"),
    ]

    operations = [
        migrations.CreateModel(
            name="JobFolder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="A name for the folder", max_length=80),
                ),
                (
                    "visible",
                    models.BooleanField(
                        default=True, help_text="Whether to show this folder"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        default=django.utils.timezone.now,
                        help_text="A slug for this job folder",
                    ),
                ),
                (
                    "description",
                    markdownfield.models.MarkdownField(
                        blank=True,
                        help_text="Instructions and so on for this folder.",
                        rendered_field="description_rendered",
                    ),
                ),
                (
                    "description_rendered",
                    markdownfield.models.RenderedMarkdownField(default=""),
                ),
                (
                    "max_pending",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum number of pending tasks that can be claimed total by one person.",
                        null=True,
                    ),
                ),
                (
                    "max_total",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum number of tasks that can be claimed total by one person, including completed ones.",
                        null=True,
                    ),
                ),
                (
                    "archived",
                    models.BooleanField(
                        default=False,
                        help_text="Set to True when this folder is all done.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Worker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "paypal_username",
                    models.CharField(
                        blank=True,
                        help_text="Input a @username, email, or mobile",
                        max_length=128,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(@[-a-zA-Z0-9_]+|(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)|^[0-9()+-]+)$"
                            )
                        ],
                    ),
                ),
                (
                    "venmo_handle",
                    models.CharField(
                        blank=True,
                        help_text="Must start with leading @",
                        max_length=128,
                        validators=[
                            django.core.validators.RegexValidator("^@[-a-zA-Z0-9_]+$")
                        ],
                    ),
                ),
                (
                    "zelle_info",
                    models.CharField(
                        blank=True,
                        help_text="Either email or mobile",
                        max_length=128,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^(@[-a-zA-Z0-9_]+|(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)|^[0-9()+-]+)$"
                            )
                        ],
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Any notes on payment or whatever."
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "twitch_username",
                    models.CharField(
                        blank=True,
                        help_text="Username on Twitch.tv",
                        max_length=128,
                        validators=[
                            django.core.validators.RegexValidator("^[-a-zA-Z0-9_'.]+$")
                        ],
                    ),
                ),
                (
                    "gmail_address",
                    models.CharField(
                        blank=True,
                        help_text="Should be of the form username@gmail.com.",
                        max_length=128,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[-a-zA-Z0-9_'.]+@gmail\\.com$"
                            )
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaymentLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.IntegerField(help_text="Amount paid")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "invoice",
                    models.ForeignKey(
                        help_text="The invoice this contributes towards",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="roster.invoice",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Name of job", max_length=160)),
                (
                    "description",
                    markdownfield.models.MarkdownField(
                        blank=True,
                        help_text="Instructions and so on for this particular job.",
                        rendered_field="description_rendered",
                    ),
                ),
                (
                    "spades_bounty",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="How many spades the job is worth",
                        verbose_name="♠",
                    ),
                ),
                (
                    "usd_bounty",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="How many US dollars the job is worth",
                        max_digits=8,
                        verbose_name="$",
                    ),
                ),
                (
                    "worker_deliverable",
                    models.TextField(
                        blank=True, help_text="Enter the deliverable of the job here"
                    ),
                ),
                (
                    "worker_notes",
                    models.TextField(blank=True, help_text="Make any notes here"),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who is currently assigned",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.worker",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        help_text="This is the folder that the job goes under.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.jobfolder",
                    ),
                ),
                (
                    "payment_preference",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PREF_NONE", "Not specified"),
                            ("PREF_INVCRD", "Invoice credits"),
                            ("PREF_PROBONO", "Pro bono"),
                            ("PREF_PAYPAL", "PayPal"),
                            ("PREF_VENMO", "Venmo"),
                            ("PREF_ZELLE", "Zelle"),
                        ],
                        default="",
                        max_length=15,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, default=django.utils.timezone.now
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "description_rendered",
                    markdownfield.models.RenderedMarkdownField(default=""),
                ),
                (
                    "progress",
                    models.CharField(
                        choices=[
                            ("JOB_NEW", "Not submitted"),
                            ("JOB_REV", "Revisions requested"),
                            ("JOB_SUB", "Submitted"),
                            ("JOB_VFD", "Completed"),
                        ],
                        default="JOB_NEW",
                        help_text="The current status of the job",
                        max_length=8,
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.semester",
                    ),
                ),
                (
                    "hours_estimate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Optional estimate for how number of hours this took. Has no effect on your payment, but useful for me to know to make sure I'm not underpaying people broadly speaking. Decimal numbers are allowed.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "admin_notes",
                    models.TextField(
                        blank=True, help_text="Evan can make internal notes here"
                    ),
                ),
            ],
        ),
    ]
